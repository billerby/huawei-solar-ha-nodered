[
    {
        "id": "1eb5a1b2baed1909",
        "type": "subflow",
        "name": "Prepare TOU Pattern",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 20,
                "y": 80,
                "wires": [
                    {
                        "id": "d4f5d2197bc0cdb1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 80,
                "wires": [
                    {
                        "id": "d4f5d2197bc0cdb1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d4f5d2197bc0cdb1",
        "type": "function",
        "z": "1eb5a1b2baed1909",
        "name": "Prepare hh:mm-hh:mm",
        "func": "function createTimeRangeString(item) {\n    // Parse the time string into a Date object\n    const startTime = new Date(item.time);\n\n    // Get the hours\n    const startHours = startTime.getHours().toString().padStart(2, '0');\n    \n    // Return the time range string\n    let startHoursMinutes =  `${startHours}:00`;\n\n    const nextdate = new Date();\n    const [hours2, minutes2] = startHoursMinutes.split(\":\").map(x => parseInt(x, 10));\n    nextdate.setHours(hours2);\n    nextdate.setMinutes(minutes2);\n    nextdate.setHours(hours2 + item.countHours);\n    const endChargeHoursMinutes = nextdate.toTimeString().slice(0, 5);\n\n    return `${startHoursMinutes}-${endChargeHoursMinutes}`;\n}\n\n// Get day of the week (7 = Sunday, 1 = Monday, etc.)\nfunction getCurrentDayAsNumber(day) {\n    return day === 0 ? 7 : day;\n}\n\n\nlet timeRanges = msg.payload.schedule.map(function (item) {\n    // Call your function here and pass in the item as an argument\n    return createTimeRangeString(item);\n});\n\nconst periods = [];\n\n// Add tomorrows day of week to the scheduling\nlet dayOfWeek = getCurrentDayAsNumber(new Date().getDay()+1);\n\nfor (const timeRange of timeRanges) {\n    periods.push(`${timeRange}/${dayOfWeek}`);\n}\n\nmsg.payload = {\n    \"periods\": periods\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "4fdf10518254202b",
        "type": "subflow",
        "name": "Filter schedules",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 0,
                "y": 80,
                "wires": [
                    {
                        "id": "5a191564e3b521d4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 80,
                "wires": [
                    {
                        "id": "5a191564e3b521d4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "5a191564e3b521d4",
        "type": "function",
        "z": "4fdf10518254202b",
        "name": "Remove unwanted nodes",
        "func": "function filterSchedule(schedule) {\n    // Get the current time\n    const currentTime = new Date();\n\n    // Filter the schedule array\n    const filteredSchedule = schedule.filter(item => {\n        // Parse the time string into a Date object\n        const time = new Date(item.time);\n\n        // Return true if the time has not passed and the value is true\n        return time > currentTime && item.value && item.countHours != null;\n    });\n\n    return filteredSchedule;\n}\n\nmsg.payload.schedule = filterSchedule(msg.payload.schedule);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "cef971cc346c85a6",
        "type": "tab",
        "label": "Calculate TOU",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5f47a9f4919a3fe7",
        "type": "group",
        "z": "cef971cc346c85a6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "404caaad53947da0",
            "ca99353faa7c0de3",
            "3d630ad93db77f6a",
            "a918afb730c5834d",
            "dc3b15eda77fbe5d"
        ],
        "x": 14,
        "y": 1019,
        "w": 432,
        "h": 362
    },
    {
        "id": "48bcdcca.fe42a4",
        "type": "api-current-state",
        "z": "cef971cc346c85a6",
        "name": "Read Nord Pool",
        "server": "d47a09d6.cf4748",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.nordpool_kwh_se3_sek_3_10_025",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "x": 280,
        "y": 260,
        "wires": [
            [
                "1732e8787388edac"
            ]
        ]
    },
    {
        "id": "428d7c7ca88db95f",
        "type": "ps-receive-price",
        "z": "cef971cc346c85a6",
        "name": "Price Receiver",
        "x": 640,
        "y": 600,
        "wires": [
            [
                "bda78da2e8c95450",
                "1447d00abf3195bd"
            ]
        ]
    },
    {
        "id": "bda78da2e8c95450",
        "type": "ps-strategy-lowest-price",
        "z": "cef971cc346c85a6",
        "name": "Lowest Price",
        "fromTime": "00",
        "toTime": "07",
        "hoursOn": "5",
        "maxPrice": "",
        "doNotSplit": true,
        "sendCurrentValueWhenRescheduling": true,
        "outputValueForOn": "true",
        "outputValueForOff": "false",
        "outputValueForOntype": "bool",
        "outputValueForOfftype": "bool",
        "outputIfNoSchedule": "true",
        "outputOutsidePeriod": "false",
        "contextStorage": "memory",
        "x": 710,
        "y": 300,
        "wires": [
            [],
            [],
            [
                "6647300243bff296"
            ]
        ]
    },
    {
        "id": "2dc3e87f425d30a8",
        "type": "cronplus",
        "z": "cef971cc346c85a6",
        "name": "Trigger at 13.05 Every day",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 5 13 * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 620,
        "wires": [
            [
                "48bcdcca.fe42a4",
                "aa7c7ee5b1e365f5"
            ]
        ]
    },
    {
        "id": "af43e4b735355b40",
        "type": "api-call-service",
        "z": "cef971cc346c85a6",
        "name": "Set TOU Periods",
        "server": "d47a09d6.cf4748",
        "version": 5,
        "debugenabled": true,
        "domain": "huawei_solar",
        "service": "set_tou_periods",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "{    \"device_id\": \"9b80e4bb5e879c09ed84abe968ce937b\",    \"periods\": payload }",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 2310,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "404caaad53947da0",
        "type": "inject",
        "z": "cef971cc346c85a6",
        "g": "5f47a9f4919a3fe7",
        "name": "Trigger",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1280,
        "wires": [
            [
                "ca99353faa7c0de3",
                "aa7c7ee5b1e365f5"
            ]
        ]
    },
    {
        "id": "ca99353faa7c0de3",
        "type": "function",
        "z": "cef971cc346c85a6",
        "g": "5f47a9f4919a3fe7",
        "name": "Mocked data",
        "func": "let payload = {\n    \"priceData\": [\n        {\n            \"value\": 0.279,\n            \"start\": \"2023-01-02T00:00:00+01:00\"\n        },\n        {\n            \"value\": 0.139,\n            \"start\": \"2023-01-02T01:00:00+01:00\"\n        },\n        {\n            \"value\": 0.08,\n            \"start\": \"2023-01-02T02:00:00+01:00\"\n        },\n        {\n            \"value\": 0.07,\n            \"start\": \"2023-01-02T03:00:00+01:00\"\n        },\n        {\n            \"value\": 0.16,\n            \"start\": \"2023-01-02T04:00:00+01:00\"\n        },\n        {\n            \"value\": 0.274,\n            \"start\": \"2023-01-02T05:00:00+01:00\"\n        },\n        {\n            \"value\": 0.425,\n            \"start\": \"2023-01-02T06:00:00+01:00\"\n        },\n        {\n            \"value\": 0.979,\n            \"start\": \"2023-01-02T07:00:00+01:00\"\n        },\n        {\n            \"value\": 1.137,\n            \"start\": \"2023-01-02T08:00:00+01:00\"\n        },\n        {\n            \"value\": 1.33,\n            \"start\": \"2023-01-02T09:00:00+01:00\"\n        },\n        {\n            \"value\": 1.309,\n            \"start\": \"2023-01-02T10:00:00+01:00\"\n        },\n        {\n            \"value\": 1.479,\n            \"start\": \"2023-01-02T11:00:00+01:00\"\n        },\n        {\n            \"value\": 1.506,\n            \"start\": \"2023-01-02T12:00:00+01:00\"\n        },\n        {\n            \"value\": 1.515,\n            \"start\": \"2023-01-02T13:00:00+01:00\"\n        },\n        {\n            \"value\": 1.523,\n            \"start\": \"2023-01-02T14:00:00+01:00\"\n        },\n        {\n            \"value\": 1.772,\n            \"start\": \"2023-01-02T15:00:00+01:00\"\n        },\n        {\n            \"value\": 2.013,\n            \"start\": \"2023-01-02T16:00:00+01:00\"\n        },\n        {\n            \"value\": 2.165,\n            \"start\": \"2023-01-02T17:00:00+01:00\"\n        },\n        {\n            \"value\": 2.246,\n            \"start\": \"2023-01-02T18:00:00+01:00\"\n        },\n        {\n            \"value\": 1.688,\n            \"start\": \"2023-01-02T19:00:00+01:00\"\n        },\n        {\n            \"value\": 1.325,\n            \"start\": \"2023-01-02T20:00:00+01:00\"\n        },\n        {\n            \"value\": 0.958,\n            \"start\": \"2023-01-02T21:00:00+01:00\"\n        },\n        {\n            \"value\": 0.931,\n            \"start\": \"2023-01-02T22:00:00+01:00\"\n        },\n        {\n            \"value\": 0.885,\n            \"start\": \"2023-01-02T23:00:00+01:00\"\n        },\n        {\n            \"value\": 0.698,\n            \"start\": \"2023-01-03T00:00:00+01:00\"\n        },\n        {\n            \"value\": 0.462,\n            \"start\": \"2023-01-03T01:00:00+01:00\"\n        },\n        {\n            \"value\": 0.48,\n            \"start\": \"2023-01-03T02:00:00+01:00\"\n        },\n        {\n            \"value\": 0.472,\n            \"start\": \"2023-01-03T03:00:00+01:00\"\n        },\n        {\n            \"value\": 0.621,\n            \"start\": \"2023-01-03T04:00:00+01:00\"\n        },\n        {\n            \"value\": 0.73,\n            \"start\": \"2023-01-03T05:00:00+01:00\"\n        },\n        {\n            \"value\": 0.868,\n            \"start\": \"2023-01-03T06:00:00+01:00\"\n        },\n        {\n            \"value\": 0.908,\n            \"start\": \"2023-01-03T07:00:00+01:00\"\n        },\n        {\n            \"value\": 0.974,\n            \"start\": \"2023-01-03T08:00:00+01:00\"\n        },\n        {\n            \"value\": 0.971,\n            \"start\": \"2023-01-03T09:00:00+01:00\"\n        },\n        {\n            \"value\": 0.977,\n            \"start\": \"2023-01-03T10:00:00+01:00\"\n        },\n        {\n            \"value\": 0.98,\n            \"start\": \"2023-01-03T11:00:00+01:00\"\n        },\n        {\n            \"value\": 0.009,\n            \"start\": \"2023-01-03T12:00:00+01:00\"\n        },\n        {\n            \"value\": 1.06,\n            \"start\": \"2023-01-03T13:00:00+01:00\"\n        },\n        {\n            \"value\": 1.095,\n            \"start\": \"2023-01-03T14:00:00+01:00\"\n        },\n        {\n            \"value\": 1.382,\n            \"start\": \"2023-01-03T15:00:00+01:00\"\n        },\n        {\n            \"value\": 1.594,\n            \"start\": \"2023-01-03T16:00:00+01:00\"\n        },\n        {\n            \"value\": 1.692,\n            \"start\": \"2023-01-03T17:00:00+01:00\"\n        },\n        {\n            \"value\": 1.673,\n            \"start\": \"2023-01-03T18:00:00+01:00\"\n        },\n        {\n            \"value\": 1.327,\n            \"start\": \"2023-01-03T19:00:00+01:00\"\n        },\n        {\n            \"value\": 1.138,\n            \"start\": \"2023-01-03T20:00:00+01:00\"\n        },\n        {\n            \"value\": 0.963,\n            \"start\": \"2023-01-03T21:00:00+01:00\"\n        },\n        {\n            \"value\": 0.843,\n            \"start\": \"2023-01-03T22:00:00+01:00\"\n        },\n        {\n            \"value\": 0.612,\n            \"start\": \"2023-01-03T23:00:00+01:00\"\n        }\n    ],\n    \"source\": \"Nordpool\"\n}\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1160,
        "wires": [
            [
                "bda78da2e8c95450",
                "1447d00abf3195bd"
            ]
        ]
    },
    {
        "id": "2b281b42d65caecc",
        "type": "ps-strategy-lowest-price",
        "z": "cef971cc346c85a6",
        "name": "Find highest prices",
        "fromTime": "06",
        "toTime": "22",
        "hoursOn": "14",
        "maxPrice": "",
        "doNotSplit": false,
        "sendCurrentValueWhenRescheduling": true,
        "outputValueForOn": "true",
        "outputValueForOff": "false",
        "outputValueForOntype": "bool",
        "outputValueForOfftype": "bool",
        "outputIfNoSchedule": "false",
        "outputOutsidePeriod": "false",
        "contextStorage": "memory",
        "x": 910,
        "y": 480,
        "wires": [
            [],
            [],
            [
                "65aaca6c2d1dbb6a"
            ]
        ]
    },
    {
        "id": "e9dbdf8889b28738",
        "type": "join",
        "z": "cef971cc346c85a6",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2130,
        "y": 440,
        "wires": [
            [
                "13812d63668cd805"
            ]
        ]
    },
    {
        "id": "6647300243bff296",
        "type": "subflow:4fdf10518254202b",
        "z": "cef971cc346c85a6",
        "name": "",
        "x": 860,
        "y": 140,
        "wires": [
            [
                "6d0e1c984caeee9b"
            ]
        ]
    },
    {
        "id": "65aaca6c2d1dbb6a",
        "type": "subflow:4fdf10518254202b",
        "z": "cef971cc346c85a6",
        "name": "",
        "x": 1120,
        "y": 600,
        "wires": [
            [
                "74996d1cfce761bc"
            ]
        ]
    },
    {
        "id": "a39658735562ae24",
        "type": "subflow:1eb5a1b2baed1909",
        "z": "cef971cc346c85a6",
        "name": "",
        "x": 1840,
        "y": 340,
        "wires": [
            [
                "e5281e3a5e08170b"
            ]
        ]
    },
    {
        "id": "f076ea1ff13f7908",
        "type": "subflow:1eb5a1b2baed1909",
        "z": "cef971cc346c85a6",
        "name": "",
        "x": 1800,
        "y": 140,
        "wires": [
            [
                "e39003f00fedd8a4"
            ]
        ]
    },
    {
        "id": "e39003f00fedd8a4",
        "type": "function",
        "z": "cef971cc346c85a6",
        "name": "append charge info",
        "func": "const modifiedArray = msg.payload.periods.map(str => {\n    return str + \"/+\";\n})\n\nmsg.payload = modifiedArray;\nreturn msg; \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 160,
        "wires": [
            [
                "e9dbdf8889b28738"
            ]
        ]
    },
    {
        "id": "e5281e3a5e08170b",
        "type": "function",
        "z": "cef971cc346c85a6",
        "name": "append discharge info",
        "func": "const modifiedArray = msg.payload.periods.map(str => {\n    return str + \"/-\";\n})\n\nmsg.payload = modifiedArray;\nreturn msg; \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 440,
        "wires": [
            [
                "e9dbdf8889b28738"
            ]
        ]
    },
    {
        "id": "13812d63668cd805",
        "type": "function",
        "z": "cef971cc346c85a6",
        "name": "merge arrays",
        "func": "let periodsToAdd = msg.payload.flat();\n\nlet payload = {\n    \"periodsToAdd\" : periodsToAdd\n}\n\nmsg.payload = payload;\nreturn msg; \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 680,
        "wires": [
            [
                "4381982ee8666ef5",
                "e6b77dc96d8d0b52"
            ]
        ]
    },
    {
        "id": "32f23b4e038a2138",
        "type": "switch",
        "z": "cef971cc346c85a6",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2170,
        "y": 620,
        "wires": [
            [
                "af43e4b735355b40"
            ]
        ]
    },
    {
        "id": "aa7c7ee5b1e365f5",
        "type": "api-current-state",
        "z": "cef971cc346c85a6",
        "name": "Get TOU",
        "server": "24cba002.90109",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.battery_time_of_use_periods",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 900,
        "y": 860,
        "wires": [
            [
                "493d4892b1fc4185"
            ]
        ]
    },
    {
        "id": "3d630ad93db77f6a",
        "type": "inject",
        "z": "cef971cc346c85a6",
        "g": "5f47a9f4919a3fe7",
        "name": "Trigger",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1340,
        "wires": [
            [
                "aa7c7ee5b1e365f5"
            ]
        ]
    },
    {
        "id": "493d4892b1fc4185",
        "type": "function",
        "z": "cef971cc346c85a6",
        "name": "Filter out periods",
        "func": "let periods = Object.entries(msg.data.attributes)\n    .filter(([key]) => key.startsWith('Period'))\n    .map(([, value]) => value);\n\n\nlet payload = {\n    \"existingPeriods\": periods\n}\n\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 860,
        "wires": [
            [
                "898443ffe18b51f6",
                "e6d991f3295183cb"
            ]
        ]
    },
    {
        "id": "4381982ee8666ef5",
        "type": "join",
        "z": "cef971cc346c85a6",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1710,
        "y": 860,
        "wires": [
            [
                "22a658fb4320ebb3",
                "3433d5734f1256a4"
            ]
        ]
    },
    {
        "id": "22a658fb4320ebb3",
        "type": "function",
        "z": "cef971cc346c85a6",
        "name": "Combine TOU:s",
        "func": "const input = msg.payload;\n\nconst periodsToAdd = input.find(obj => obj.hasOwnProperty('periodsToAdd')).periodsToAdd;\n\nconst existingPeriods = input.find(obj => obj.hasOwnProperty('existingPeriods')).existingPeriods;\n\n\nfor (const period of periodsToAdd) {\n    const [timeRange, dow] = period.split(\"/\");\n    const daysOfWeek = dow.slice(0, -1).split(\"\");\n\n    // Find the index of the existing period for any of the same days of the week\n    const index = existingPeriods.findIndex(existingPeriod => {\n        const [_, dow] = existingPeriod.split(\"/\");\n        const existingDaysOfWeek = dow.slice(0, -1).split(\"\");\n        return existingDaysOfWeek.some(day => daysOfWeek.includes(day));\n    });\n\n    // If an existing period was found, remove it and insert the new period at the same index\n    if (index !== -1) {\n        existingPeriods.splice(index, 1, period);\n    } else {\n        // If no existing period was found, add the new period to the end of the array\n        existingPeriods.push(period);\n    }\n}\n\n// Convert the array to a Set object to remove duplicates\nconst set = new Set(existingPeriods);\n\n// Convert the Set back to an array\nconst uniquePeriods = Array.from(set);\n\n\nconst concatenatedString = uniquePeriods.join('\\n');\n\nmsg.payload = concatenatedString;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 760,
        "wires": [
            [
                "32f23b4e038a2138",
                "f2d8380e542c7863"
            ]
        ]
    },
    {
        "id": "185da513978220e0",
        "type": "join",
        "z": "cef971cc346c85a6",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1270,
        "y": 280,
        "wires": [
            [
                "bc9e7002f870f8fc",
                "752009c6dbe763ac"
            ]
        ]
    },
    {
        "id": "6d0e1c984caeee9b",
        "type": "function",
        "z": "cef971cc346c85a6",
        "name": "set topic",
        "func": "msg.topic = \"lowprice\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 220,
        "wires": [
            [
                "185da513978220e0"
            ]
        ]
    },
    {
        "id": "81d859330a6c487a",
        "type": "function",
        "z": "cef971cc346c85a6",
        "name": "set topic",
        "func": "msg.topic = \"highprice\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 340,
        "wires": [
            [
                "185da513978220e0"
            ]
        ]
    },
    {
        "id": "bc9e7002f870f8fc",
        "type": "function",
        "z": "cef971cc346c85a6",
        "name": "calculate averages",
        "func": "let highprices = msg.payload.highprice;\nlet lowprices = msg.payload.lowprice;\n\nfunction calculateAverage(prices) {\n    const today = new Date();\n    let totalPrice = 0;\n    let count = 0;\n\n    for (const hour of prices.hours) {\n        const startDate = new Date(hour.start);\n\n        if (startDate > today && hour.onOff) {\n\n            if (hour.price < 0) {\n                totalPrice -= hour.price;\n            } else {\n                totalPrice += hour.price;\n            }\n\n            count++;\n        }\n    }\n\n    return totalPrice / count;\n}\n\nlet averageHighPrice = calculateAverage(highprices);\n\nif (isNaN(averageHighPrice)) {\n    averageHighPrice = 1;\n}\n\nlet averageLowPrice = calculateAverage(lowprices);\n\nif (isNaN(averageLowPrice)) {\n    averageLowPrice = 1;\n}\n\nconst percentageDifference = ((averageHighPrice - averageLowPrice) / averageLowPrice) * 100;\n\nmsg.data= {\n    \"avglow\" : averageLowPrice,\n    \"averageHighPrice\" : averageHighPrice,\n    \"percentageDiff\" : percentageDifference\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 440,
        "wires": [
            [
                "27dfd0bc580599bd",
                "75cbbbd643b373d6"
            ]
        ]
    },
    {
        "id": "27dfd0bc580599bd",
        "type": "switch",
        "z": "cef971cc346c85a6",
        "name": "Is it worth it?",
        "property": "data.percentageDiff",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "10",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1490,
        "y": 260,
        "wires": [
            [
                "012b872c4226aeeb",
                "7828ee7ec2c90f63",
                "ad381a97391e5e2f"
            ]
        ]
    },
    {
        "id": "012b872c4226aeeb",
        "type": "function",
        "z": "cef971cc346c85a6",
        "name": "Copy payload",
        "func": "msg.payload = msg.payload.lowprice;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 180,
        "wires": [
            [
                "f076ea1ff13f7908",
                "2a84f1066e5b2909"
            ]
        ]
    },
    {
        "id": "7828ee7ec2c90f63",
        "type": "function",
        "z": "cef971cc346c85a6",
        "name": "Copy payload",
        "func": "msg.payload = msg.payload.highprice;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 400,
        "wires": [
            [
                "a39658735562ae24"
            ]
        ]
    },
    {
        "id": "898443ffe18b51f6",
        "type": "function",
        "z": "cef971cc346c85a6",
        "name": "Only keep todays schedule",
        "func": "// We should only keep the existing schedule that represents the current day of week\n// Get day of the week (7 = Sunday, 1 = Monday, etc.)\nfunction getCurrentDayAsNumber(day) {\n    return day === 0 ? 7 : day;\n}\n\nlet dayOfWeekToday = getCurrentDayAsNumber(new Date().getDay());\n\n\nconst filteredArray = msg.payload.existingPeriods.filter(str => {\n    // Extract the day of the week from the string\n    const day = parseInt(str.split('/')[1], 10);\n    \n    // Return only the elements that do not represent the day after tomorrow\n    return (day == dayOfWeekToday);\n});\n\n\nlet payload = {\n    \"existingPeriods\": filteredArray\n}\n\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 860,
        "wires": [
            [
                "4381982ee8666ef5",
                "100d54046d11c1f3"
            ]
        ]
    },
    {
        "id": "f2d8380e542c7863",
        "type": "debug",
        "z": "cef971cc346c85a6",
        "name": "To battery",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2120,
        "y": 900,
        "wires": []
    },
    {
        "id": "1447d00abf3195bd",
        "type": "function",
        "z": "cef971cc346c85a6",
        "name": "Negate prices",
        "func": "function negateValues(data) {\n    return data.map(x => ({ ...x, value: -x.value }));\n}\n\nlet negatedData = negateValues(msg.payload.priceData);\n\nmsg.payload.priceData = negatedData;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 760,
        "wires": [
            [
                "44da98aff25a77c1"
            ]
        ]
    },
    {
        "id": "74996d1cfce761bc",
        "type": "function",
        "z": "cef971cc346c85a6",
        "name": "Negate back",
        "func": "function negateValues(data) {\n    return data.map(x => ({ ...x, value: -x.value }));\n}\n\nlet negatedData = negateValues(msg.payload.hours);\n\nmsg.payload.priceData = negatedData;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 500,
        "wires": [
            [
                "81d859330a6c487a"
            ]
        ]
    },
    {
        "id": "a918afb730c5834d",
        "type": "function",
        "z": "cef971cc346c85a6",
        "g": "5f47a9f4919a3fe7",
        "name": "Mocked data before prices arrived",
        "func": "let payload = {\n    \"priceData\": [\n        {\n            \"value\": 0.279,\n            \"start\": \"2022-12-30T00:00:00+01:00\"\n        },\n        {\n            \"value\": 0.139,\n            \"start\": \"2022-12-30T01:00:00+01:00\"\n        },\n        {\n            \"value\": 0.08,\n            \"start\": \"2022-12-30T02:00:00+01:00\"\n        },\n        {\n            \"value\": 0.07,\n            \"start\": \"2022-12-30T03:00:00+01:00\"\n        },\n        {\n            \"value\": 0.16,\n            \"start\": \"2022-12-30T04:00:00+01:00\"\n        },\n        {\n            \"value\": 0.274,\n            \"start\": \"2022-12-30T05:00:00+01:00\"\n        },\n        {\n            \"value\": 0.425,\n            \"start\": \"2022-12-30T06:00:00+01:00\"\n        },\n        {\n            \"value\": 0.979,\n            \"start\": \"2022-12-30T07:00:00+01:00\"\n        },\n        {\n            \"value\": 1.137,\n            \"start\": \"2022-12-30T08:00:00+01:00\"\n        },\n        {\n            \"value\": 1.33,\n            \"start\": \"2022-12-30T09:00:00+01:00\"\n        },\n        {\n            \"value\": 1.309,\n            \"start\": \"2022-12-30T10:00:00+01:00\"\n        },\n        {\n            \"value\": 1.479,\n            \"start\": \"2022-12-30T11:00:00+01:00\"\n        },\n        {\n            \"value\": 1.506,\n            \"start\": \"2022-12-30T12:00:00+01:00\"\n        },\n        {\n            \"value\": 1.515,\n            \"start\": \"2022-12-30T13:00:00+01:00\"\n        },\n        {\n            \"value\": 1.523,\n            \"start\": \"2022-12-30T14:00:00+01:00\"\n        },\n        {\n            \"value\": 1.772,\n            \"start\": \"2022-12-30T15:00:00+01:00\"\n        },\n        {\n            \"value\": 2.013,\n            \"start\": \"2022-12-30T16:00:00+01:00\"\n        },\n        {\n            \"value\": 2.165,\n            \"start\": \"2022-12-30T17:00:00+01:00\"\n        },\n        {\n            \"value\": 2.246,\n            \"start\": \"2022-12-30T18:00:00+01:00\"\n        },\n        {\n            \"value\": 1.688,\n            \"start\": \"2022-12-30T19:00:00+01:00\"\n        },\n        {\n            \"value\": 1.325,\n            \"start\": \"2022-12-30T20:00:00+01:00\"\n        },\n        {\n            \"value\": 0.958,\n            \"start\": \"2022-12-30T21:00:00+01:00\"\n        },\n        {\n            \"value\": 0.931,\n            \"start\": \"2022-12-30T22:00:00+01:00\"\n        },\n        {\n            \"value\": 0.885,\n            \"start\": \"2022-12-30T23:00:00+01:00\"\n        }\n    ],\n    \"source\": \"Nordpool\"\n}\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1060,
        "wires": [
            [
                "1447d00abf3195bd",
                "bda78da2e8c95450"
            ]
        ]
    },
    {
        "id": "dc3b15eda77fbe5d",
        "type": "inject",
        "z": "cef971cc346c85a6",
        "g": "5f47a9f4919a3fe7",
        "name": "Trigger",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1200,
        "wires": [
            [
                "a918afb730c5834d"
            ]
        ]
    },
    {
        "id": "2a84f1066e5b2909",
        "type": "debug",
        "z": "cef971cc346c85a6",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1800,
        "y": 260,
        "wires": []
    },
    {
        "id": "ad381a97391e5e2f",
        "type": "debug",
        "z": "cef971cc346c85a6",
        "name": "debug 11",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1700,
        "y": 300,
        "wires": []
    },
    {
        "id": "75cbbbd643b373d6",
        "type": "debug",
        "z": "cef971cc346c85a6",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "data",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1640,
        "y": 480,
        "wires": []
    },
    {
        "id": "752009c6dbe763ac",
        "type": "debug",
        "z": "cef971cc346c85a6",
        "name": "debug 13",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 200,
        "wires": []
    },
    {
        "id": "1732e8787388edac",
        "type": "function",
        "z": "cef971cc346c85a6",
        "name": "New prices?",
        "func": "msg.data = {\n    \"updatedToday\": msg.payload.attributes.tomorrow_valid\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 360,
        "wires": [
            [
                "a02a3665a7789483",
                "e9dfd9368f455b4f"
            ]
        ]
    },
    {
        "id": "a02a3665a7789483",
        "type": "switch",
        "z": "cef971cc346c85a6",
        "name": "",
        "property": "data.updatedToday",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 430,
        "y": 540,
        "wires": [
            [
                "428d7c7ca88db95f"
            ]
        ]
    },
    {
        "id": "e9dfd9368f455b4f",
        "type": "switch",
        "z": "cef971cc346c85a6",
        "name": "",
        "property": "data.updatedToday",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 260,
        "wires": [
            [
                "61f24f3ff4d8c2e9"
            ]
        ]
    },
    {
        "id": "61f24f3ff4d8c2e9",
        "type": "delay",
        "z": "cef971cc346c85a6",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 270,
        "y": 80,
        "wires": [
            [
                "48bcdcca.fe42a4"
            ]
        ]
    },
    {
        "id": "187ecc6b2b93d0ff",
        "type": "comment",
        "z": "cef971cc346c85a6",
        "name": "Below for testing",
        "info": "",
        "x": 100,
        "y": 1000,
        "wires": []
    },
    {
        "id": "44da98aff25a77c1",
        "type": "function",
        "z": "cef971cc346c85a6",
        "name": "Calculate hoursOn",
        "func": "\nfunction negateValues(data) {\n    return data.map(x => ({ ...x, value: -x.value }));\n}\n\nlet negatedData = negateValues(msg.payload.priceData);\n\n// Get the date for tomorrow\nconst tomorrow = new Date();\ntomorrow.setDate(tomorrow.getDate() + 1);\nconst tomorrowString = tomorrow.toISOString().split('T')[0];\n\n// Extract the values from the dictionaries for tomorrow and sort them in descending order\n// Remove hours with a price below 0.02 (not worth using battery to me)\nconst tomorrowSorted = negatedData\n    .filter(d => d.start.startsWith(tomorrowString) && d.value > 0.02)\n    .map(d => d.value)\n    .sort((a, b) => b - a);\n\n\n// Create a new array with the top values\n// Calculate how many hours we want to discharge\n// We use the hours where the price is higher than average * 1.3 (30% more expensive)\nlet hoursToDischarge = 0;\nif (!tomorrowSorted || tomorrowSorted.length === 0) {\n    // the array is empty or undefined only discharge for one hour (fix later to no discharge)\n    hoursToDischarge = 1;\n}else {\n    const averagePrice = tomorrowSorted.reduce((a, b) => a + b) / negatedData.length;\n    let array = [];\n    for (const price of tomorrowSorted) {\n        if (price > (averagePrice * 1.3)) {\n            array.push(price);\n            hoursToDischarge++;\n        }\n    }\n}\n\nlet config = {\n    \"hoursOn\": hoursToDischarge\n}\nmsg.payload.config = config;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 640,
        "wires": [
            [
                "2b281b42d65caecc"
            ]
        ]
    },
    {
        "id": "e6b77dc96d8d0b52",
        "type": "debug",
        "z": "cef971cc346c85a6",
        "name": "debug 18",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1960,
        "y": 680,
        "wires": []
    },
    {
        "id": "3433d5734f1256a4",
        "type": "debug",
        "z": "cef971cc346c85a6",
        "name": "debug 19",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1860,
        "y": 960,
        "wires": []
    },
    {
        "id": "e6d991f3295183cb",
        "type": "debug",
        "z": "cef971cc346c85a6",
        "name": "debug 20",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 1040,
        "wires": []
    },
    {
        "id": "100d54046d11c1f3",
        "type": "debug",
        "z": "cef971cc346c85a6",
        "name": "debug 21",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 980,
        "wires": []
    },
    {
        "id": "d47a09d6.cf4748",
        "type": "server",
        "name": "Home Assistant",
        "version": 5,
        "addon": true,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": true,
        "cacheJson": true,
        "heartbeat": false,
        "heartbeatInterval": 30,
        "areaSelector": "friendlyName",
        "deviceSelector": "friendlyName",
        "entitySelector": "friendlyName",
        "statusSeparator": "at: ",
        "statusYear": "hidden",
        "statusMonth": "short",
        "statusDay": "numeric",
        "statusHourCycle": "h23",
        "statusTimeFormat": "h:m",
        "enableGlobalContextStore": true
    },
    {
        "id": "24cba002.90109",
        "type": "server",
        "name": "Home Assistant",
        "version": 5,
        "addon": true,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": true,
        "cacheJson": true,
        "heartbeat": false,
        "heartbeatInterval": 30,
        "areaSelector": "friendlyName",
        "deviceSelector": "friendlyName",
        "entitySelector": "friendlyName",
        "statusSeparator": "at: ",
        "statusYear": "hidden",
        "statusMonth": "short",
        "statusDay": "numeric",
        "statusHourCycle": "h23",
        "statusTimeFormat": "h:m",
        "enableGlobalContextStore": true
    }
]